##
#c-pluff build script
##
import platform,os
Import('env')

lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')

cpluff_env = lib_env.Clone()
target_os = env.get('TARGET_OS')
######################################################################
# Build flags
######################################################################
cpluff_env.AppendUnique(CPPPATH= ['libcpluff/'])
if target_os not in ['windows', 'winrt']:
	cpluff_env.AppendUnique(CPPDEFINES = ['CP_C_API=CP_EXPORT',
					'CP_HOST=\"\\"'+env.get('TARGET_OS')+'\\"\"',
					'CP_DATADIR=\"\\\"/usr/local/share\\\"\"',
					'DLOPEN_POSIX',
					'DPIC',
					'CP_THREADS=\"\\\"Posix\\"\"',
					'CP_SHREXT=\"\\".so\\"\"',
					'CP_FNAMESEP_CHAR=\"\'/\'\"',
					'CP_FNAMESEP_STR=\"\\\"/\\"\"',
					'PACKAGE=\"\\\"cpluff\\\"\"'])
	cpluff_env.AppendUnique(LIBS = ['dl'])
	cpluff_env.PrependUnique(CCFLAGS = ['-fPIC'])

######################################################################
# Source files and Targets
######################################################################
cpluff_src = [f for f in env.Glob('libcpluff/*.c') if os.path.basename(f.path) not in ['thread_windows.c']]
cpluff_src.extend(env.Glob('kazlib/*.c'))

cpluff = cpluff_env.StaticLibrary('cpluff', cpluff_src)
cpluff_env.InstallTarget(cpluff, 'libcpluff')
