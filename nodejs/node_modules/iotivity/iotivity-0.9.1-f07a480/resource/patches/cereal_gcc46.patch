From 17300ee96e42f8848d27db6fc97f04de293662d8 Mon Sep 17 00:00:00 2001
From: Erich Keane <erich.keane@intel.com>
Date: Thu, 6 Nov 2014 14:37:00 -0800
Subject: [PATCH] Get this to work on g++4.6.3

---
 include/cereal/cereal.hpp                  |  2 +-
 include/cereal/details/helpers.hpp         | 32 ++++++++--------
 include/cereal/details/traits.hpp          | 61 +++++++++++++++++-------------
 include/cereal/external/rapidjson/reader.h | 13 ++-----
 include/cereal/external/rapidjson/writer.h | 12 ++----
 include/cereal/types/common.hpp            | 19 +++++++---
 include/cereal/types/memory.hpp            | 10 ++---
 7 files changed, 77 insertions(+), 72 deletions(-)

diff --git a/include/cereal/cereal.hpp b/include/cereal/cereal.hpp
index b2858af..a219729 100644
--- a/include/cereal/cereal.hpp
+++ b/include/cereal/cereal.hpp
@@ -856,7 +856,7 @@ namespace cereal
           std::uint32_t version;
 
           process( make_nvp<ArchiveType>("cereal_class_version", version) );
-          itsVersionedTypes.emplace_hint( lookupResult, hash, version );
+          itsVersionedTypes.insert( lookupResult, std::pair<std::size_t, std::uint32_t>(hash, version) );
 
           return version;
         }
diff --git a/include/cereal/details/helpers.hpp b/include/cereal/details/helpers.hpp
index e792d44..60e13c8 100644
--- a/include/cereal/details/helpers.hpp
+++ b/include/cereal/details/helpers.hpp
@@ -55,7 +55,7 @@ namespace cereal
   /*! To ensure compatability between 32, 64, etc bit machines, we need to use
    * a fixed size type instead of size_t, which may vary from machine to
    * machine. */
-  using size_type = uint64_t;
+   typedef uint64_t size_type;
 
   // forward decls
   class BinaryOutputArchive;
@@ -138,12 +138,12 @@ namespace cereal
       // otherwise, we store a reference.  If we were passed an array, don't
       // decay the type - keep it as an array, and then proceed as normal
       // with the RValue business
-      using DT = typename std::conditional<std::is_array<typename std::remove_reference<T>::type>::value,
+      typedef typename std::conditional<std::is_array<typename std::remove_reference<T>::type>::value,
                                            typename std::remove_cv<T>::type,
-                                           typename std::decay<T>::type>::type;
-      using Type = typename std::conditional<std::is_rvalue_reference<T>::value,
+                                           typename std::decay<T>::type>::type DT;
+      typedef typename std::conditional<std::is_rvalue_reference<T>::value,
                                              DT,
-                                             typename std::add_lvalue_reference<DT>::type>::type;
+                                             typename std::add_lvalue_reference<DT>::type>::type Type;
       // prevent nested nvps
       static_assert( !std::is_base_of<detail::NameValuePairCore, T>::value,
                      "Cannot pair a name to a NameValuePair" );
@@ -207,9 +207,9 @@ namespace cereal
   {
     //! Internally store the pointer as a void *, keeping const if created with
     //! a const pointer
-    using PT = typename std::conditional<std::is_const<typename std::remove_pointer<T>::type>::value,
+    typedef typename std::conditional<std::is_const<typename std::remove_pointer<T>::type>::value,
                                          const void *,
-                                         void *>::type;
+                                         void *>::type PT;
 
     BinaryData( T && d, uint64_t s ) : data(d), size(s) {}
 
@@ -248,10 +248,10 @@ namespace cereal
     private:
       // If we get passed an RValue, we'll just make a local copy if it here
       // otherwise, we store a reference
-      using DT = typename std::decay<T>::type;
-      using Type = typename std::conditional<std::is_rvalue_reference<T>::value,
+      typedef typename std::decay<T>::type DT;
+      typedef typename std::conditional<std::is_rvalue_reference<T>::value,
                                              DT,
-                                             typename std::add_lvalue_reference<DT>::type>::type;
+                                             typename std::add_lvalue_reference<DT>::type>::type Type;
 
     public:
       SizeTag( T && sz ) : size(const_cast<Type>(sz)) {}
@@ -283,17 +283,17 @@ namespace cereal
   template <class Key, class Value>
   struct MapItem
   {
-    using DecayKey = typename std::decay<Key>::type;
-    using KeyType = typename std::conditional<
+    typedef typename std::decay<Key>::type DecayKey;
+    typedef typename std::conditional<
       std::is_rvalue_reference<Key>::value,
       DecayKey,
-      typename std::add_lvalue_reference<DecayKey>::type>::type;
+      typename std::add_lvalue_reference<DecayKey>::type>::type KeyType;
 
-    using DecayValue = typename std::decay<Value>::type;
-    using ValueType =  typename std::conditional<
+    typedef typename std::decay<Value>::type DecayValue;
+    typedef  typename std::conditional<
       std::is_rvalue_reference<Value>::value,
       DecayValue,
-      typename std::add_lvalue_reference<DecayValue>::type>::type;
+      typename std::add_lvalue_reference<DecayValue>::type>::type ValueType;
 
     //! Construct a MapItem from a key and a value
     /*! @internal */
diff --git a/include/cereal/details/traits.hpp b/include/cereal/details/traits.hpp
index 871886f..011054b 100644
--- a/include/cereal/details/traits.hpp
+++ b/include/cereal/details/traits.hpp
@@ -411,12 +411,12 @@ namespace cereal
       };
 
       template <class T, class A, bool Valid>
-      struct get_member_save_minimal_type { using type = void; };
+      struct get_member_save_minimal_type { typedef void type; };
 
       template <class T, class A>
       struct get_member_save_minimal_type<T, A, true>
       {
-        using type = decltype( cereal::access::member_save_minimal( std::declval<A const &>(), std::declval<T const &>() ) );
+        typedef decltype( cereal::access::member_save_minimal( std::declval<A const &>(), std::declval<T const &>() ) ) type;
       };
     } // end namespace detail
 
@@ -428,7 +428,7 @@ namespace cereal
         "cereal detected a non-const member save_minimal.  "
         "save_minimal member functions must always be const" );
 
-      using type = typename detail::get_member_save_minimal_type<T, A, check::value>::type;
+      typedef typename detail::get_member_save_minimal_type<T, A, check::value>::type type;
       static_assert( (check::value && is_minimal_type<type>::value) || !check::value,
         "cereal detected a member save_minimal with an invalid return type.  "
         "return type must be arithmetic or string" );
@@ -473,12 +473,12 @@ namespace cereal
       };
 
       template <class T, class A, bool Valid>
-      struct get_member_versioned_save_minimal_type { using type = void; };
+      struct get_member_versioned_save_minimal_type { typedef void type; };
 
       template <class T, class A>
       struct get_member_versioned_save_minimal_type<T, A, true>
       {
-        using type = decltype( cereal::access::member_save_minimal( std::declval<A const &>(), std::declval<T const &>(), 0 ) );
+        typedef decltype( cereal::access::member_save_minimal( std::declval<A const &>(), std::declval<T const &>(), 0 ) ) type;
       };
     } // end namespace detail
 
@@ -490,7 +490,7 @@ namespace cereal
         "cereal detected a versioned non-const member save_minimal.  "
         "save_minimal member functions must always be const" );
 
-      using type = typename detail::get_member_versioned_save_minimal_type<T, A, check::value>::type;
+      typedef typename detail::get_member_versioned_save_minimal_type<T, A, check::value>::type type;
       static_assert( (check::value && is_minimal_type<type>::value) || !check::value,
         "cereal detected a versioned member save_minimal with an invalid return type.  "
         "return type must be arithmetic or string" );
@@ -519,12 +519,12 @@ namespace cereal
       };
 
       template <class T, class A, bool Valid>
-      struct get_non_member_save_minimal_type { using type = void; };
+      struct get_non_member_save_minimal_type { typedef void type; };
 
       template <class T, class A>
       struct get_non_member_save_minimal_type <T, A, true>
       {
-        using type = decltype( save_minimal( std::declval<A const &>(), std::declval<T const &>() ) );
+        typedef decltype( save_minimal( std::declval<A const &>(), std::declval<T const &>() ) ) type;
       };
     } // end namespace detail
 
@@ -536,7 +536,7 @@ namespace cereal
         "cereal detected a non-const type parameter in non-member save_minimal.  "
         "save_minimal non-member functions must always pass their types as const" );
 
-      using type = typename detail::get_non_member_save_minimal_type<T, A, check::value>::type;
+      typedef typename detail::get_non_member_save_minimal_type<T, A, check::value>::type type;
       static_assert( (check::value && is_minimal_type<type>::value) || !check::value,
         "cereal detected a non-member save_minimal with an invalid return type.  "
         "return type must be arithmetic or string" );
@@ -565,12 +565,12 @@ namespace cereal
       };
 
       template <class T, class A, bool Valid>
-      struct get_non_member_versioned_save_minimal_type { using type = void; };
+      struct get_non_member_versioned_save_minimal_type { typedef void type; };
 
       template <class T, class A>
       struct get_non_member_versioned_save_minimal_type <T, A, true>
       {
-        using type = decltype( save_minimal( std::declval<A const &>(), std::declval<T const &>(), 0 ) );
+        typedef decltype( save_minimal( std::declval<A const &>(), std::declval<T const &>(), 0 ) ) type;
       };
     } // end namespace detail
 
@@ -582,7 +582,7 @@ namespace cereal
         "cereal detected a non-const type parameter in versioned non-member save_minimal.  "
         "save_minimal non-member functions must always pass their types as const" );
 
-      using type = typename detail::get_non_member_versioned_save_minimal_type<T, A, check::value>::type;
+      typedef typename detail::get_non_member_versioned_save_minimal_type<T, A, check::value>::type type;
       static_assert( (check::value && is_minimal_type<type>::value) || !check::value,
         "cereal detected a non-member versioned save_minimal with an invalid return type.  "
         "return type must be arithmetic or string" );
@@ -608,7 +608,7 @@ namespace cereal
       template <class Source>
       struct NoConvertConstRef : NoConvertBase
       {
-        using type = Source; //!< Used to get underlying type easily
+        typedef Source type; //!< Used to get underlying type easily
 
         template <class Dest, class = typename std::enable_if<std::is_same<Source, Dest>::value>::type>
         operator Dest () = delete;
@@ -626,7 +626,7 @@ namespace cereal
       template <class Source>
       struct NoConvertRef : NoConvertBase
       {
-        using type = Source; //!< Used to get underlying type easily
+        typedef Source type; //!< Used to get underlying type easily
 
         template <class Dest, class = typename std::enable_if<std::is_same<Source, Dest>::value>::type>
         operator Dest () = delete;
@@ -698,7 +698,7 @@ namespace cereal
           "cereal detected member load_minimal but no valid member save_minimal.  "
           "cannot evaluate correctness of load_minimal without valid save_minimal." );
 
-        using SaveType = typename detail::get_member_save_minimal_type<T, A, true>::type;
+        typedef typename detail::get_member_save_minimal_type<T, A, true>::type SaveType;
         const static bool value = has_member_load_minimal_impl<T, A>::value;
         const static bool valid = has_member_load_minimal_type_impl<T, A, SaveType>::value;
 
@@ -759,7 +759,7 @@ namespace cereal
           "cereal detected member versioned load_minimal but no valid member versioned save_minimal.  "
           "cannot evaluate correctness of load_minimal without valid save_minimal." );
 
-        using SaveType = typename detail::get_member_versioned_save_minimal_type<T, A, true>::type;
+        typedef typename detail::get_member_versioned_save_minimal_type<T, A, true>::type SaveType;
         const static bool value = has_member_versioned_load_minimal_impl<T, A>::value;
         const static bool valid = has_member_versioned_load_minimal_type_impl<T, A, SaveType>::value;
 
@@ -814,8 +814,8 @@ namespace cereal
           "cereal detected non-member load_minimal but no valid non-member save_minimal.  "
           "cannot evaluate correctness of load_minimal without valid save_minimal." );
 
-        using SaveType = typename detail::get_non_member_save_minimal_type<T, A, true>::type;
-        using check = has_non_member_load_minimal_impl<T, A, SaveType>;
+        typedef typename detail::get_non_member_save_minimal_type<T, A, true>::type SaveType;
+        typedef has_non_member_load_minimal_impl<T, A, SaveType> check;
         static const bool value = check::exists;
 
         static_assert( check::valid || !check::exists, "cereal detected different types in corresponding non-member load_minimal and save_minimal functions.  "
@@ -866,8 +866,8 @@ namespace cereal
           "cereal detected non-member versioned load_minimal but no valid non-member versioned save_minimal.  "
           "cannot evaluate correctness of load_minimal without valid save_minimal." );
 
-        using SaveType = typename detail::get_non_member_versioned_save_minimal_type<T, A, true>::type;
-        using check = has_non_member_versioned_load_minimal_impl<T, A, SaveType>;
+        typedef typename detail::get_non_member_versioned_save_minimal_type<T, A, true>::type SaveType;
+        typedef has_non_member_versioned_load_minimal_impl<T, A, SaveType> check;;
         static const bool value = check::exists;
 
         static_assert( check::valid || !check::exists, "cereal detected different types in corresponding non-member versioned load_minimal and save_minimal functions.  "
@@ -1182,9 +1182,16 @@ namespace cereal
       };
     }
 
+    // works around the lack of decltype inheritance in GCC 4.6
+    template<class T>
+    struct shared_wrapper
+    {
+       typedef decltype(detail::shared_from_this_wrapper::check(std::declval<T>())) type;
+
+    };
     //! Determine if T or any base class of T has inherited from std::enable_shared_from_this
     template<class T>
-    struct has_shared_from_this : decltype(detail::shared_from_this_wrapper::check(std::declval<T>()))
+    struct has_shared_from_this : shared_wrapper<T>::type
     { };
 
     //! Get the type of the base class of T which inherited from std::enable_shared_from_this
@@ -1192,10 +1199,10 @@ namespace cereal
     struct get_shared_from_this_base
     {
       private:
-        using PtrType = decltype(detail::shared_from_this_wrapper::get(std::declval<T>()));
+        typedef decltype(detail::shared_from_this_wrapper::get(std::declval<T>())) PtrType;
       public:
         //! The type of the base of T that inherited from std::enable_shared_from_this
-        using type = typename std::decay<typename PtrType::element_type>::type;
+        typedef typename std::decay<typename PtrType::element_type>::type type;
     };
 
     // ######################################################################
@@ -1209,14 +1216,14 @@ namespace cereal
     template <class T, bool IsCerealMinimalTrait = std::is_base_of<detail::NoConvertBase, T>::value>
     struct strip_minimal
     {
-      using type = T;
+      typedef T type;
     };
 
     //! Specialization for types wrapped in a NoConvert
     template <class T>
     struct strip_minimal<T, true>
     {
-      using type = typename T::type;
+      typedef typename T::type type;
     };
   } // namespace traits
 
@@ -1232,10 +1239,12 @@ namespace cereal
       { return nullptr; }
     };
 
+    template<class T>
+    struct is_default_constructible : std::is_constructible<T>{};
     template <class T, class A>
     struct Construct<T, A, false, false>
     {
-      static_assert( std::is_default_constructible<T>::value,
+      static_assert( is_default_constructible<T>::value,
                      "Trying to serialize a an object with no default constructor. \n\n "
                      "Types must either be default constructible or define either a member or non member Construct function. \n "
                      "Construct functions generally have the signature: \n\n "
diff --git a/include/cereal/external/rapidjson/reader.h b/include/cereal/external/rapidjson/reader.h
index 7790907..3ee838c 100644
--- a/include/cereal/external/rapidjson/reader.h
+++ b/include/cereal/external/rapidjson/reader.h
@@ -402,20 +402,13 @@ private:
 	}
 
   // cereal Temporary until constexpr support is added in RTM
-#ifdef _MSC_VER
+//#ifdef _MSC_VER
   template <class Ch>
   bool characterOk( Ch c )
   {
     return c < 256;
   }
-
-  template <>
-  bool characterOk<char>( Ch )
-  {
-    return true;
-  }
-
-#else
+/*#else
   // As part of a fix for GCC 4.7
   template <class T>
   static constexpr int to_int( T t ){ return t; }
@@ -432,7 +425,7 @@ private:
     characterOk(Ch c)
   { return c < 256; }
 #endif
-
+*/
 	// Parse string, handling the prefix and suffix double quotes and escaping.
 	template<unsigned parseFlags, typename Stream, typename Handler>
 	void ParseString(Stream& stream, Handler& handler) {
diff --git a/include/cereal/external/rapidjson/writer.h b/include/cereal/external/rapidjson/writer.h
index 0f87255..e02c27a 100644
--- a/include/cereal/external/rapidjson/writer.h
+++ b/include/cereal/external/rapidjson/writer.h
@@ -177,20 +177,14 @@ protected:
 	}
 
   // cereal Temporary until constexpr support is added in RTM
-#ifdef _MSC_VER
+//#ifdef _MSC_VER
   template <class Ch>
   bool characterOk( Ch c )
   {
     return c < 256;
   }
 
-  template <>
-  bool characterOk<char>( Ch )
-  {
-    return true;
-  }
-
-#else
+/*#else
   // As part of a fix for GCC 4.7
   template <class T>
   static constexpr int to_int( T t ){ return t; }
@@ -206,7 +200,7 @@ protected:
   typename std::enable_if< to_int(std::numeric_limits<Ch>::max()) >= to_int(256), bool>::type
     characterOk(Ch c)
   { return c < 256; }
-#endif
+#endif*/
 
 	//! \todo Optimization with custom double-to-string converter.
 	void WriteDouble(double d) {
diff --git a/include/cereal/types/common.hpp b/include/cereal/types/common.hpp
index abb8bfd..5c014cd 100644
--- a/include/cereal/types/common.hpp
+++ b/include/cereal/types/common.hpp
@@ -55,6 +55,15 @@ namespace cereal
 
     namespace
     {
+      template<class en>
+      struct underlying_type
+      {
+          typedef typename std::conditional<
+                  en(-1)<en(0),
+                  typename std::make_signed<en>::type,
+                  typename std::make_unsigned<en>::type
+                  > ::type type;
+      };
       //! Gets the underlying type of an enum
       /*! @internal */
       template <class T, bool IsEnum>
@@ -64,7 +73,7 @@ namespace cereal
       /*! Specialization for when we actually have an enum
           @internal */
       template <class T>
-      struct enum_underlying_type<T, true> { using type = typename std::underlying_type<T>::type; };
+      struct enum_underlying_type<T, true> { typedef typename underlying_type<T>::type type; };
     } // anon namespace
 
     //! Checks if a type is an enum
@@ -78,13 +87,13 @@ namespace cereal
     class is_enum
     {
       private:
-        using DecayedT  = typename std::decay<T>::type;
-        using StrippedT = typename ::cereal::traits::strip_minimal<DecayedT>::type;
+        typedef typename std::decay<T>::type DecayedT;
+        typedef typename ::cereal::traits::strip_minimal<DecayedT>::type StrippedT;
 
       public:
         static const bool value = std::is_enum<StrippedT>::value;
-        using type = StrippedT;
-        using base_type = typename enum_underlying_type<StrippedT, value>::type;
+        typedef StrippedT type;
+        typedef typename enum_underlying_type<StrippedT, value>::type base_type;
     };
   }
 
diff --git a/include/cereal/types/memory.hpp b/include/cereal/types/memory.hpp
index bf56c92..d2357ff 100644
--- a/include/cereal/types/memory.hpp
+++ b/include/cereal/types/memory.hpp
@@ -115,9 +115,9 @@ namespace cereal
     class EnableSharedStateHelper
     {
       // typedefs for parent type and storage type
-      using BaseType = typename ::cereal::traits::get_shared_from_this_base<T>::type;
-      using ParentType = std::enable_shared_from_this<BaseType>;
-      using StorageType = typename std::aligned_storage<sizeof(ParentType)>::type;
+      typedef typename ::cereal::traits::get_shared_from_this_base<T>::type BaseType;
+      typedef std::enable_shared_from_this<BaseType> ParentType;
+      typedef typename std::aligned_storage<sizeof(ParentType)>::type StorageType;
 
       public:
         //! Saves the state of some type inheriting from enable_shared_from_this
@@ -257,7 +257,7 @@ namespace cereal
     {
       // Storage type for the pointer - since we can't default construct this type,
       // we'll allocate it using std::aligned_storage and use a custom deleter
-      using ST = typename std::aligned_storage<sizeof(T)>::type;
+      typedef typename std::aligned_storage<sizeof(T)>::type ST;
 
       // Valid flag - set to true once construction finishes
       //  This prevents us from calling the destructor on
@@ -345,7 +345,7 @@ namespace cereal
     {
       // Storage type for the pointer - since we can't default construct this type,
       // we'll allocate it using std::aligned_storage
-      using ST = typename std::aligned_storage<sizeof(T)>::type;
+      typedef typename std::aligned_storage<sizeof(T)>::type ST;
 
       // Allocate storage - note the ST type so that deleter is correct if
       //                    an exception is thrown before we are initialized
-- 
1.9.3

